# Une image vaut mille mots

Camille Tremblay-Antoine^[Université Laval]
Nadjim Fréchet^[Université de Montréal]

```{r, echo=T, include=F, eval = F}

#*****************************************#
#### 0 - Téléchargement des packages ######
#*****************************************#

library(tidyverse)   # Pour utiliser les packages dplyr et ggplot2
library(lattice)     # Pour uttiliser le package lattice
library(readstata13) # Pour télécharger des bases de données de format dta
library(grid)        # Pour des grids de graphique
library(gridExtra)   # Pour des grids de graphique


#********************************************************************************************************************************#
#### 0.1 - Téléchargement la base de données de l'Étude Électorale Canadienne de 2019 diponible sur http://www.ces-eec.ca/  ######
#********************************************************************************************************************************#

Data <- read.dta13("/Users/nadjimfrechet/Dropbox/projet-global_esclean/Canada/Data/RawData/CES19.dta")


#### 1 - Nettoyage de base de la variable d'intérêt ####

## Province

Data$province <- NA
Data$province[as.numeric(Data$pes19_province) == 5              ] <- "T-N-L"
Data$province[as.numeric(Data$pes19_province) %in% c(4,7,10)    ] <- "Maritimes"
Data$province[as.numeric(Data$pes19_province) %in% c(1:3,12)    ] <- "Ouest"
Data$province[as.numeric(Data$pes19_province) == 11             ] <- "Québec"
Data$province[as.numeric(Data$pes19_province) == 9              ] <- "Ontario"
Data$province[as.numeric(Data$pes19_province) %in% c(4,6,8,13)  ] <- NA
table(Data$province)

## Idéologie gauche-droite

Data$gaucheDroite <- NA
Data$gaucheDroite <- Data$cps19_lr_scale_bef
table(Data$gaucheDroite)

#### 1.1 - Nettoyage de la base de données du Graphique BaseR ####

GraphiqueExemple <- Data %>%
  # Sélection de la variable d'intérêt
  select(province) %>%
  # Retrait des valeurs manquantes
  na.omit() %>%
  # Sélection de la variable de regroupement
  group_by(province) %>%
  # Nombre d'obsertvations par valeur de la variable d'intérêt
  summarise(n = n()) %>%
  # Proportion par valeur de la variable d'intérêt
  mutate(prop = round(n/sum(n)*100,2)) %>%
  # Sélection des variables pertinentes pour le graphique
  ungroup() %>%
  select(province, prop) 

## Extraction des valeurs intéressantes

x <- GraphiqueExemple$province

y <- GraphiqueExemple$prop

#### 1.2 - Nettoyage de la base de données du Graphique lattice ####

GraphiqueLattice <- Data %>%
  # Sélection des variables d'intérêt
  select(province, gaucheDroite) %>%
  # Retrait des valeurs manquantes
  na.omit() %>%
  # Sélection de la variable de regroupement
  group_by(province, gaucheDroite) %>%
  # Enlever les valeurs manquante
  na.omit()  

```

# \textbf{Une image vaut mille mots:} \ Visualisation graphique en R 

## Introduction

Une fois les données collectées, nettoyées, traitées et analysées, une partie centrale du travail d'un scientifique des données est de faire parler les résultats de ses tests empiriques. Il s'agit alors de trouver la meilleure manière de rendre l'information digeste pour les experts et initiés de votre discipline académique ou pour le grand public. La visualisation graphique des données est donc centrale afin de vulgariser les résultats d'une recherche empirique. 

L'objectif de ce chapitre est d'apprendre aux codeurs débutants les rudiments de la visualisation graphique en R. Ce chapitre présentera plus particulièrement les packages R *ggplot2* et *dplyr* eux-mêmes téléchargeable à partir du package *tidyverse*. Si *dplyr* permet de préparer les données avant leur visualisation, *ggplot2* est un package dédié à la production de graphiques. Ce chapitre présente sa grammaire avec une série d'exemples [@wickham2016ggplot2; @wickham2016r].

Ce chapitre est plus technique que théorique et permet aux codeurs débutants d'en apprendre davantage sur la manière de construire des graphiques en R avec des données concrètes. Cependant, la question centrale qui devrait vous guider lorsque vous créez des visualisations est la suivante: **Comment opimiser l'intelligibilité des données?** L'objectif d'un graphique n'est pas seulement d'illustrer les données. Un bon graphique devrait permettre de vulgariser une information ou de mettre en saillance un aspect particulier des données. L'objectif communicationnel devrait toujours être gardé en tête. Les graphiques en exemple dans ce chapitre sont construits avec les données de l'Étude Électorale Canadienne de 2019 qui sont facilement téléchargeables sur leur site\footnote{http://www.ces-eec.ca/}. 

La première section de ce chapitre expose les options et packages également disponibles pour la construction de graphiques en R. La deuxième section de ce chapitre compare les avantages et inconvénients de l'utilisation de *ggplot2* par rapport aux autres packages de visualisation de données qui auront été présentés. La troisième section de chapitre montre des exemples de graphiques construits avec la grammaire de *ggplot2* en utilisant les données de l'Étude électorale canadienne de 2019. Les codes employés pour produire les graphiques en exemple sont disponibles dans l'annexe de ce livre. Ces codes reproductibles permettront aux codeurs débutants d'adapter ces derniers pour leurs propres projets.

## Réflexion théorique
### Les options disponibles

De nombreux *packages* ont été développés dans le langage R dans le but de visualiser des données graphiquement, il devient donc facile de s'y perdre. Heureusement, les options qui s'offrent à nous se précisent lorsque l'on s'intéresse à ce qui est le plus utilisé dans la communauté des codeurs de ce langage de programmation. Les *packages* les plus utilisés représentent des outils qui ont été substantiellement validés et améliorés par leurs développeurs, mais aussi par une importante communauté de codeurs en ligne et de chercheurs universitaires. Trois de ces options sont présentées dans ce chapitre: les graphiques du *Base R*, le *package* *Lattice* et le *package* *ggplot2*. Les avantages et inconvénients respectifs de ces trois approches pour la création de graphiques sont explicités dans les sections suivantes.

#### Avantages et inconvénients de Base R

Le *Base R* est le langage de base de R et il permet de faire de nombreuses manipulations statistiques sans avoir à installer de *packages* au préalable. Le *Base R* permet notamment de produire des graphiques rapidement. Cela peut être utile pour visualiser la distribution d'une variable ou pour regarder la relation entre deux d'entre elles par exemple. Pour produire un graphique avec le langage de base R, il suffit de faire appel à la fonction *plot()*. Avec la fonction *plot()*, le codeur peut visualiser la distribution d'une variable seule en spécifiant l'axe des *x* dans cette dernière. Le codeur peut également visualiser la relation entre deux variables en spécifiant à l'intérieur de la fonction celles qui composeront les axes des *x* et des *y* du graphique. Les fonctions *barplot(), hist()* ou *boxplot()* disponibles dans le *Base R* permettent de spécifier le style de graphique souhaité, qu'on veuille représenter nos données sous forme de diagramme à barre, d'histogramme ou de diagramme en boîtes [@kabacoff2010r, p. 119-132].

<!--

Ce chapitre est plus technique que théorique et permet aux codeurs débutants d'en apprendre davantage sur la manière de construire des graphiques en R avec des données concrètes. Cependant, la question centrale qui devrait vous guider lorsque vous créez des visualisations est la suivante: **Comment opimiser l'intelligibilité des données?** L'objectif d'un graphique n'est pas seulement d'illustrer les données. Un bon graphique devrait permettre de vulgariser une information ou de mettre en saillance un aspect particulier des données. L'objectif communicationnel devrait toujours être gardé en tête. Les graphiques en exemple dans ce chapitre sont construits avec les données de l'Étude électorale canadienne de 2015 qui sont facilement téléchargeables sur leur site\footnote{https://ces-eec.arts.ubc.ca/english-section/home/}. La première section de ce chapitre expose les options et packages également disponibles pour la construction de graphique en R. La deuxième section de ce chapitre compare les avantages et inconvénients de l'utilisation de *ggplot2* par rapport aux autres packages de visualisation de données disponibles. La troisième section de chapitre montre des exemples de graphique construit avec la grammaire de *ggplot2* et avec les données de l'Étude électorale canadienne de 2015. Cette section de ce chapitre présente également les codes utilisés pour produire les graphiques en exemple. Ces codes reproductibles permettront aux codeurs débutants d'adapter ces derniers pour leur propre projet.

-->


```{r, echo=T, include=T, eval = F}

# Exemple de graphique avec la fonction barplot() du BaseR

barplot(y,names.arg=x,
 main="Figure 1 - Proportion (%) de répondants par province\n",
 col = "blue",
 sub="\nSource: Étude Électorale Canadienne de 2019                                                ") 

```

Alors qu'un peu tout peut être fait avec le *Base R*, ce langage demeure élémentaire; il est difficile d'innover dans la visualisation ou même de produire des graphiques plus sophistiqués. Le *Base R* peut sembler plus simple pour l'exploration de données ou pour produire des graphiques de base rapidement, mais ce langage devient rapidement complexe lorsqu'on cherche à améliorer l'esthétique de son graphique ou visualiser des relations entre plusieurs variables, ce que *lattice* et *ggplot2* permettent plus facilement[@wickham2016ggplot2, p. 3-4].

#### Avantages et inconvénients de *lattice*

Développé par Deepayan Sarkar, *lattice* cherche à faciliter la visualisation de graphique en facettes. Plus précisément, ce *package* vise à améliorer les graphiques du *Base R* en fournissant de meilleures options de graphisme par défaut pour visualiser des relations multivariées. Ce *package* est donc intéressant pour les chercheurs et les codeurs voulant présenter graphiquement la relation entre plus de deux variables [@kabacoff2010r, p. 373-377; @sarkar2008lattice; @sarkar2020package]. Pour produire un graphique de base avec *Lattice*, le *package lattice* doit préalablement être installé dans la bibliothèque de *packages* du codeur et chargé dans sa session au début de son code (voir annexe). Par la suite, le codeur doit spécifier le type de graphique souhaité avec la fonction appropri/e[^10]. Une fois la fonction choisie, il doit spécifier par une formule les variables x et y ainsi que la troisième variable à contrôler et à visualiser en facettes (*graph_type(formula | variable en facettes, data=)*).

Si la Figure 1 produite à partir du *Base R* nous permet de visualiser le pourcentage de répondants par province dans l'Étude Électorale Canadienne de 2019, le *package lattice* nous permet de visualiser facilement ce même pourcentage de répondants en tenant compte du positionnement idéologique des Canadiens par province sur l'échelle gauche-droite, comme l'illustre la Figure 2 (0 étant la gauche et 10 la droite).

```{r, echo=T, include=T, eval = F}

# Exemple de graphique avec la fonction histogram() du package lattice

histogram(~gaucheDroite | province, data = GraphiqueLattice, breaks = seq(0, 10, 
  by = 1), 
  main = "Figure 2 - Distribution des Canadiens\n par province sur l'échelle gauche-droite\n",
  xlab = "\nIdéologie gauche-droite",
  ylab = "Pourcentage (%)\n",
  col  = "blue",
  sub="\nSource: Étude Électorale Canadienne de 2019                                                ")

```

Cependant, le *package lattice* a pour désavantage d'avoir un modèle formel (une grammaire de graphique) moins compréhensible et intuitif que celui de *ggplot2* lorsque vient le temps d'améliorer l'esthétisme des graphiques. De plus, sa plus faible popularité cause que ce *package* reste moins développé par la communauté de codeurs de R que ne l'est *ggplot2*. Nous examinons plus en détail la grammaire de graphique de ce dernier *package* ainsi que ses avantages et inconvénients dans la prochaine section [@kabacoff2010r, p. 373-377 et 390; @wickham2016ggplot2, p. 6].

#### Avantages et inconvénients de ggplot2

Développé principalement par Hadley Wickham, *ggplot2* est un  *package R* faisant partie de la collection de *packages* de *tidyverse*. *Ggplot2* peut être donc utilisé avec les autres *packages* centraux de *tidyverse*, limitant ainsi de potentiels conflits entre les fonctions de *packages* qui puissent être incompatibles avec *ggplot2*. Par exemple, le *package dplyr* de *tidyverse* est très utile pour analyser, organiser et préparer vos données à visualiser avec *ggplot2* [@tidy_2019; @wickham2016r, p. 30]. 

Le principal avantage de *ggplot2* reste sa grammaire qui permet à l'utilisateur de rensre ses graphiques beaucoup plus visuellement attrayants en facilitant la personalisation esthétique. Ceci permet de pousser l'esthétisme de vos graphiques à un très haut niveau par rapport aux autres *packages* de visualisation graphique disponibles en R. Les graphiques *ggplot2* se construisent couche par couche, soit par l'ajout des différents éléments du graphique au fur et à mesure dans le code du graphique à construire. 

La première couche des graphiques *ggplot* est généralement celle des données et des variables à visualiser. Elle contient plusieurs éléments fondamentaux qui sont essentiels à chaque graphique. Le premier élément est la spécification de l'utilisation du *package ggplot2* qui se fait simplement en appelant la fonCtion *ggplot2()*. Dans cette fonction, il faut ensuite mentionner quelle est la base de données (data=<NOM DE LA BASE DE DONNÉES>) ainsi que la fonction qui sera utilisée pour positionner les données (aes(<POSITIONNEMENT DES DONNÉES>). Le positionnement le plus courant est de positionner des données *x* par rapport à des données *y*, ce qui se fait de la sorte: aes(x=<NOM DE LA COLONNE DE X>, y=<NOM DE LA COLONNE DE y>). 

La deuxième couche des graphiques *ggplot2* est celle du *geom*, qui spécifie le type de graphique souhaité. Les types de graphiques les plus couramment utilisés avec *ggplot2* sont les nuages de points (*geom_point()*), les diagrammes de lignes de tendances ou de séries chronologiques (*geom_line()*), les courbes de densité (*geom_density()*) ainsi que les graphiques à bandes (*geom_bar()*). Mais les possibilités sont infinies (ou presque!) avec ggplot2 et bien plus de types de graphiques existent.

Les autres couches des graphiques *ggplot2* dépendent souvent du codeur et des étapes de construction de son graphique[^11] [@wickham2016ggplot2, p. 77 et 89-93]. Le reste de ce chapitre présente la grammaire de *ggplot2* avec un exemple de construction de graphique à bande présenté couche par couche.

```{r, echo=T, include=T, eval = F}

# Première couche de l'exemple de graphique
# ggplot2 (base de données, variables et geom)

ggplot(data=GraphiqueExemple, aes(x=province, y=prop)) +
  geom_bar(stat="identity") 

```

Tel que mentionné dans le dernier paragraphe, la première étape est de spécifier la base de données et les variables qu'on souhaite visualiser. Vous vous souviendrez qu'au début de la section nous avons mentionné la collection *tidyverse*, et plus spécifiquement le *package dplyr* qui y est compris. Ce dernier a été utilisé pour nettoyer/calculer la proportion de répondants par province au préalable, ce qui nous permet de positionner directement la variable *prop* dans l'axe y. 


<!--

Avantages: tidyverse, beauté et possibilités infinies (on peut les animer!!!), beaux résultats même pour les débutants, rapidité pour l'exploration de données, facettes
          - Inconvénients: complexité potentielle, package extérieur, courbe d'apprentissage plus élevée
          
          
Commentaires de Cloé:           
          
- À la suggestion de Cloé: avoir un annexe (cheat sheet) ggplot2 à côté de l'annexe des codes (termes importants, autres..).
      
-->        


[^10]: Plusieurs options disponibles comme des histogrammes avec la fonction *histogram()* ou des graphiques de densité avec la fonction *densityplot()*.

[^11]: Les étapes (couches) d'un graphique *ggplot2* ne sont pas nécessairement dans le même ordre d'un graphique à un autre.

\clearpage

## Références

<!--

## Réflexion théorique

### Les options disponibles

Lorsque vous souhaitez créer des graphiques en R, les options abondent. De multiples *packages* ont été développés dans le but de visualiser des données. Heureusement, les choix diminuent lorsque l'on regarde ce qui est le plus utilisé dans la communauté. L'objectif n'est pas simplement de présenter les *packages* les plus courrants parce qu'ils sont les plus communs. Les *packages* les plus utilisés représentent des outils qui ont été grandement vérifiés et améliorés par la communauté en ligne, dont la documentation est abondante et pour lesquels les ressources d'aide en ligne sont innombrables. 

Trois options vous sont présentées: Base R, Lattice et ggplot2. Les avantages et inconvénients respectifs de ces trois approches pour la création de graphiques sont explicités dans les sections suivantes.

#### Avantages et inconvénients de Base R

Base R est le logiciel de base qui contient le langage de programmation R. Lorsque R Studio est installé sur un ordinateur, il est toujours possible d'utiliser le langage de base de R pour coder sans même avoir à installer des *packages*. Base R permet donc de produire des graphiques rapidement sans avoir à installer quoi que ce soit. 


Pour produire un graphique avec ce langage de base, il suffit de faire appel à la fonction *plot()* dans laquelle il est spécifié un x et y à partir d'une base de données et un graphiques est déjà créé. Les fonctions *barplot(), hist()* ou *boxplot()* ajoutés au graphiques permettent de spécifier le style de visualisation souhaitée.

-->

<!--

## Réflexion théorique


Alors qu'un peu tout peut être fait avec Base R, ce langage demeure élémentaire; il est difficile d'innover dans la visualisation ou même de produire des graphiques moindrement sophistiqués. Base R peut sembler plus simple pour l'exploration de données ou pour produire des graphiques de base rapidement, mais ce langage devient vite complexe.

**Exemple Base R**

#### Avantages et inconvénients de Lattice

Développé par Deepayan Sarkar, Lattice est un système graphique qui implémente spécifiquement l'idée des graphiques à facettes, qui a été initialement développée pour des langages informatique comme *S* et *S-Plus* [sarkar2020package]. Ce langage vise à améliorer les graphiques de Base R en fournissant de meilleures valeurs par défaut et la possibilité d'afficher facilement des relations multivariées. Le package prend en charge la création de graphiques en treillis (afficher une variable ou la relation entre les variables, conditionné par une ou plusieurs autres variables). 

Pour produire un grpahique de base avec Lattice, le *package lattice* doit préalablement être installé sur l'ordinateur et chargé dans la session d'utilisation. Il suffit ensuite de spécifier un type de graphique, la formule qui lie x et y ainsi que les données qui serviront à produire le graphique (*graph_type(formula, data=)*).

Il est, de manière générale, plus complexe de se familiariser avec ce langage qui est moins instinctif et moins populaire; la communauté en ligne est donc moins développée.

**Exemple Lattice**

#### Avantages et inconvénients de ggplot2

Développé principalement par Hadley Wickham, **ggplot2** est un  *package R* faisant partie de la collection de *packages* de **tidyverse**. L'utilisation de **ggplot2** permet donc une adéquation avec d'autres *packages* centraux au développement de la visualisation des données et des analyses statistiques, comme  **dplyr** [@tidy_2019]. Lorsque la **tidyverse** est utilisée de l'importation des données à leur visualisation graphique, la cohérence entre les *packages* présente l'avantage d'assurer qu'il n'y a pas de conflits entre les fonctions, et donc, réduit les erreurs introduites potentiellement. 


Avantages: tidyverse, beauté et possibilités infinies (on peut les animer!!!), beaux résultats même pour les débutants, rapidité pour l'exploration de données, facettes
          - Inconvénients: complexité potentielle, package extérieur, courbe d'apprentissage plus élevée


# Plan
- Question: Comment opimiser l'intelligibilité des données?
      - Communication et vulgarisation **Question : Est-ce qu'il nous faut nécessairement une question de recherche dans ce chapitre qui est plus technique**
      
- Réflexion théorique:
      - Différentes options disponibles (base R, lattice et ggplot2)
      - Avantages et inconvénients de ggplot2
          - Avantages: tidyverse, beauté et possibilités infinies (on peut les animer!!!), beaux résultats même pour les débutants, rapidité pour l'exploration de données, facettes
          - Inconvénients: complexité potentielle, package extérieur, Base R est toujours là, courbe d'apprentissage plus élevée **Montrer un exemple de graphique construit layer par layer (couche par couche)**
      - Comparaison
          - Base R: la fonction plot() de base ou avec arguments, les fonctions barplot(), hist(), boxplot(), les grids. Base R peut sembler plus siple pour l'exploration de données, mais de vient vite plus complexe (même pour visualiser avec grid).
          - Lattice: explication du package densityplot(), splom(), xyplot()
- Réflexion méthodologique :
      - Comment utiliser ggplot2:
          - Grammar of graphics: créer toutes sortes de graphiques à partir de quelques composants: data, geom, coordinate system et plot
          - Aesthetic propreties de base: size, color, emplacements de x et y
          - Transformation de la base de données d'origine directement dans le graphique (ex: stat)
      - Exemples et fonctionnalités
          - Graphiques les plus communs avec variables discrètes ou continues
          - Cartes
          - Visualisation de 3 variables
          - Visualisation des marges d'erreur, juste spécifier que l'option est possible
– Trucs et astuces :
      - ggplot2 cheat sheet
      - Pleins d'idées de visualisation en ligne et de codes adaptables disponibles
      - Retour sur la communication des données: choix du graphique en fonction des données et de l'objectif de communication
      
      
      -->
      
