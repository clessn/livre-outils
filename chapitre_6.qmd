# Outils de visualisation graphique
## Une image vaut mille mots

Camille Tremblay-Antoine[^chapitre_7-1] Nadjim Fréchet[^chapitre_7-2]

[^chapitre_7-1]: Université Laval

[^chapitre_7-2]: Université de Montréal

```{r, echo=T, include=F, eval = F}

#*****************************************#
#### 0 - Téléchargement des packages ######
#*****************************************#

library(tidyverse)   # Pour utiliser les packages dplyr et ggplot2
library(lattice)     # Pour utiliser le package lattice
library(readstata13) # Pour télécharger des bases de données de format dta
library(grid)        # Pour des grids de graphique
library(gridExtra)   # Pour des grids de graphique


#********************************************************************************************************************************#
#### 0.1 - Téléchargement de la base de données de l'Étude Électorale Canadienne de 2019 disponible sur http://www.ces-eec.ca/  ######
#********************************************************************************************************************************#

Data <- read.dta13("/Users/nadjimfrechet/Dropbox/projet-global_esclean/Canada/Data/RawData/CES19.dta")


#### 1 - Nettoyage de base de la variable d'intérêt ####

## Province

Data$province <- NA
Data$province[as.numeric(Data$pes19_province) == 5              ] <- "T-N-L"
Data$province[as.numeric(Data$pes19_province) %in% c(4,7,10)    ] <- "Maritimes"
Data$province[as.numeric(Data$pes19_province) %in% c(1:3,12)    ] <- "Ouest"
Data$province[as.numeric(Data$pes19_province) == 11             ] <- "Québec"
Data$province[as.numeric(Data$pes19_province) == 9              ] <- "Ontario"
Data$province[as.numeric(Data$pes19_province) %in% c(4,6,8,13)  ] <- NA
table(Data$province)

## Idéologie gauche-droite

Data$gaucheDroite <- NA
Data$gaucheDroite <- Data$cps19_lr_scale_bef
table(Data$gaucheDroite)

#### 1.1 - Nettoyage de la base de données du Graphique BaseR ####

GraphiqueExemple <- Data %>%
  # Sélection de la variable d'intérêt
  select(province) %>%
  # Retrait des valeurs manquantes
  na.omit() %>%
  # Sélection de la variable de regroupement
  group_by(province) %>%
  # Nombre d'observations par valeur de la variable d'intérêt
  summarise(n = n()) %>%
  # Proportion par valeur de la variable d'intérêt
  mutate(prop = round(n/sum(n)*100,2)) %>%
  # Sélection des variables pertinentes pour le graphique
  ungroup() %>%
  select(province, prop) 

## Extraction des valeurs intéressantes

x <- GraphiqueExemple$province

y <- GraphiqueExemple$prop

#### 1.2 - Nettoyage de la base de données du Graphique lattice ####

GraphiqueLattice <- Data %>%
  # Sélection des variables d'intérêt
  select(province, gaucheDroite) %>%
  # Retrait des valeurs manquantes
  na.omit() %>%
  # Sélection de la variable de regroupement
  group_by(province, gaucheDroite) %>%
  # Enlever les valeurs manquantes
  na.omit()  


```

## Introduction

Une fois les données collectées, nettoyées, traitées et analysées, une partie centrale du travail d'un scientifique de données est de faire parler les résultats de ses tests empiriques. Il s'agit alors de trouver la meilleure manière de rendre l'information digeste pour les experts et initiés de votre discipline académique ou pour le grand public. La visualisation graphique des données est donc centrale afin de vulgariser les résultats d'une recherche empirique.

Mais qu'est-ce qu'une bonne visualisation de données? Quel type de graphique choisir? Quelles couleurs utiliser? Quelles informations mettre en évidence? Ce chapitre ne répond pas à ces questions, une myriade d'ouvrages les ont déjà traitées. Du classique *The Visual Display of Quantitative Information* de Edward Tufte (1983) jusqu'aux plus récents ouvrages tels que *Data Visualization: A Practical Introduction* de Kieran Healy (2018) ou *Fundamentals of Data Visualization* de Claus O. Wilke (2019), les ressources sont nombreuses pour vous aider à améliorer vos compétences en visualisation de données. Il en ressort souvent un adage qui revient sous différentes versions: excellence et intégrité [@tufte83]; "Be Brief, Clear, Picturesque, and Accurate" pour Bessler (2023); "accuracy, utility, and efficiency" pour [@zhuMeasuringEffectiveData2007] , "Intégrité, Simplicité, Contexte, Esthétique" pour Arel-Bundock (2021). En somme, bien qu'il n'existe pas de solution toute faite, il est largement reconnu que l'adaptation de la visualisation selon l'objectif et les données à communiquer est cruciale. Il faut équilibrer soigneusement ces éléments.

Ce chapitre se concentre plutôt à faire une sommaire recension des outils de visualisation nécessaires aux personnes s'intéressant à la recherche en sciences sociales. Une première section discute de la sélection des outils. Ensuite, ceux-ci sont présentés selon trois catégories: les outils pour les diagrammes, les outils pour les analyses descriptives et les outils pour visualiser les régressions. Une dernière section ouvre une réflexion sur les visualisations réactives.

<! -- Il y avait précédemment une section 6.1 historique avec une division par période intéressante. J'aurais suggéré d'y adjoindre une ligne du temps pour mieux visualiser le tout. -->

<! -- Il y avait également une note informative sur le Milestones Project qui était particulièrement bien mise en forme. J'aurais suggéré de reprendre ce format à travers tout le livre pour présenter des infos supplémentaires ou des sources pertinentes. -->

## Sélection des outils: débat R et Python

Il existe plusieurs outils de visualisation qui répondent à des besoins différents. Nous nous concentrerons sur les outils respectant au mieux les critères de sélections établis au chapitre 1.

Bien entendu, les logiciels tels que *Tableau*, *Stata*, *SPSS*, *SAS* ou encore *Excel* peuvent s'avérer très pertinents selon vos exigences spécifiques. Ils sont souvent dotés d'une interface utilisateur intuitive, facilitant ainsi leur utilisation pour une variété de tâches. Toutefois, ils pourraient présenter certaines limites en matière de personnalisation des analyses et des visualisations. Par ailleurs, bien que certains de ces outils offrent une grande flexibilité, leur coût peut être considérable. Si votre institution possède une licence pour ces logiciels, il demeure judicieux de les utiliser. 

Il existe des outils gratuits et offrant un plus grand contrôle et offre plus de flexibilité que les logiciels de visualisation de données. Les logiciels. Programmation possible de personnaliser les graphiques à l'infini. 

Bien que ce livre prend position en faveur de *R* comme présenté au chapitre 2, il est important de reconnaître les capacités de *Python* dans le domaine de la visualisation graphique. *Python* est un langage de programmation généraliste et est répandu dans la majorité des universités et sur le marché du travail [@ozgurMatLabVsPython2017]. Matplotlib, Seaborn et Plotly sont des *packages* de  

*R* est spécialisé en statistiques et scientific research and academia, analytical power of R is virtually unmatched.[@ozgurMatLabVsPython2017].  



https://www.r-project.org/about.html

## Outils pour les schémas

Il peut être nécessaire au cours d’un processus scientifique, une présentation, autre de faire des schémas.

Toujours pertinent de faire un croquis à la main, mais lorsque vient le temps de le rendre propre, présentable quels outils s’offrent à nous?

Moody, D. (2007). What Makes a Good Diagram? Improving the Cognitive Effectiveness of Diagrams in IS Development. In W. Wojtkowski, W. G. Wojtkowski, J. Zupancic, G. Magyar, & G. Knapp (Eds.), Advances in Information Systems Development (pp. 481–492). Springer US.

Larkin, J. H., & Simon, H. A. (1987). Why a Diagram is (Sometimes) Worth Ten Thousand Words. Cognitive Science, 11(1), 65–100.

Suttorp, M. M., Siegerink, B., Jager, K. J., Zoccali, C., & Dekker, F. W. (2015). Graphical presentation of confounding in directed acyclic graphs. Nephrology Dialysis Transplantation, 30(9), 1418–1423.

### Diagrams.net (anciennement Draw.io)
the best free diagram and flowchart app
### Lucidchart

### Miro

<! -- Si vous envisagez parler de Miro, je soulignerais les frais importants reliés à son utilisation qui en limite énormément l'usage. Il limite l'utilisateur à 3 tableaux, ce qui est très peu lorsqu'on souhaite l'utiliser comme principal outil de visualisation. Il permet cependant de produire des cartes conceptuelles ou des cartes mentales relativement impressionnantes. -->

## Outils pour les analyses descriptives

### R
Lorsque vous souhaitez créer des graphiques en R, les options abondent. De multiples *packages* ont été développés dans le but de visualiser des données. Heureusement, les choix diminuent lorsque l'on regarde ce qui est le plus utilisé dans la communauté. L'objectif n'est pas simplement de présenter les *packages* les plus courrants parce qu'ils sont les plus communs. Les *packages* les plus utilisés représentent des outils qui ont été grandement vérifiés et améliorés par la communauté en ligne, dont la documentation est abondante et pour lesquels les ressources d'aide en ligne sont innombrables. 

Trois options vous sont présentées: Base R, Lattice et ggplot2. Les avantages et inconvénients respectifs de ces trois approches pour la création de graphiques sont explicités dans les sections suivantes.

<! -- J'ajouterais une note ici, dans le même format que précédemment, qui irait comme suit: Pour trouver de l'inspiration pour la réalisation de vis graphiques en R, nous vous conseillons le site [R Graph Gallery](https://r-graph-gallery.com/), qui constitue une référence sur le sujet. -->

#### Base R
Le *Base R* est le langage de base de R et il permet de faire de nombreuses manipulations statistiques sans avoir à installer de *packages* au préalable. Le *Base R* permet notamment de produire des graphiques rapidement. Cela peut être utile pour visualiser la distribution d'une variable ou pour regarder la relation entre deux d'entre elles, par exemple. Pour produire un graphique avec le langage de base R, il suffit de faire appel à la fonction *plot()*. Avec la fonction *plot()*, le codeur peut visualiser la distribution d'une variable seule en spécifiant l'axe des *x* dans cette dernière. Le codeur peut également visualiser la relation entre deux variables en spécifiant à l'intérieur de la fonction celles qui composeront les axes des *x* et des *y* du graphique. Les fonctions *barplot(), hist()* ou *boxplot()* disponibles dans le *Base R* permettent de spécifier le style de graphique souhaité, qu'on veuille représenter nos données sous forme de diagramme à barre, d'histogramme ou de diagramme en boîtes [@kabacoff22, p. 119-132].

Alors qu'un peu tout peut être fait avec le *Base R*, ce langage demeure élémentaire; il est difficile d'innover dans la visualisation ou même de produire des graphiques plus sophistiqués. Le *Base R* peut sembler plus simple pour l'exploration de données ou pour produire des graphiques de base rapidement, mais ce langage devient rapidement complexe lorsqu'on cherche à améliorer l'esthétique de son graphique ou à visualiser des relations entre plusieurs variables, ce que *lattice* et *ggplot2* permettent plus facilement[@wickham09, p. 3-4].

#### Lattice
Développé par Deepayan Sarkar, lattice cherche à faciliter la visualisation de graphique en facettes. Plus précisément, ce package vise à améliorer les graphiques du Base R en fournissant de meilleures options de graphisme par défaut pour visualiser des relations multivariées. Ce package est donc intéressant pour les chercheurs et les codeurs voulant présenter graphiquement la relation entre plus de deux variables (Kabacoff, 2022, p. 373‑377; Sarkar, 2008, 2023). Pour produire un graphique de base avec Lattice, le package lattice doit préalablement être installé dans la bibliothèque de packages du codeur et chargé dans sa session au début de son code (voir annexe). Par la suite, le codeur doit spécifier le type de graphique souhaité avec la fonction appropriée3. Une fois la fonction choisie, il doit spécifier par une formule les variables x et y ainsi que la troisième variable à contrôler et à visualiser en facettes (graph_type(formula | variable en facettes, data=)).

Cependant, le package lattice a pour désavantage d’avoir un modèle formel (une grammaire de graphique) moins compréhensible et intuitif que celui de ggplot2 lorsque vient le temps d’améliorer l’esthétisme des graphiques. De plus, sa plus faible popularité fait en sorte que ce package demeure moins développé par la communauté de codeurs de R que ne l’est ggplot2. Nous examinons plus en détail la grammaire de graphique de ce dernier package ainsi que ses avantages et inconvénients dans la prochaine section (Kabacoff, 2022, p. 373‑377 et 390; Wickham, 2009, p. 6).

#### Ggplot 2
Développé principalement par Hadley Wickham, *ggplot2* est un *package R* faisant partie de la collection de *packages* de *tidyverse*. Ainsi, *Ggplot2* peut être utilisé avec les autres *packages* centraux de *tidyverse* ce qui limite de potentiels conflits entre les fonctions de *packages* qui puissent être incompatibles avec *ggplot2*. Par exemple, le *package dplyr* de *tidyverse* est très utile pour analyser, organiser et préparer vos données à visualiser avec *ggplot2* [@wickham_etal19; @wickham_etal23, p. 30].

Le principal avantage de *ggplot2* reste sa grammaire qui permet à l'utilisateur de rendre ses graphiques beaucoup plus visuellement attrayants en facilitant la personnalisation esthétique. Ceci permet de pousser l'esthétisme de vos graphiques à un très haut niveau par rapport aux autres *packages* de visualisation graphique disponibles en R. Les graphiques *ggplot2* se construisent couche par couche, soit par l'ajout des différents éléments du graphique au fur et à mesure dans le code du graphique à construire.


## Outils pour visualiser les régressions


### modelsummary 
[@arel-bundock22a]

### Stargazer

### Ggplot2 et marginal effect

### Aller plus loin: La visualisation interactive des données

Si jusqu'à présent la visualisation des données a été présentée comme une étape permettant de présenter les résultats de recherches, il est également possible de considérer la visualisation comme une utile au processus d'exploration des données comportants de nombreuses dimensions (autres façons de le dire peut-être?). En effet, les formes de visualisations dites interactives permettant d'explorer et même d'analyser les données à même notre graphique ou notre tableau. Cela contribue à mieux comprendre la structures des données, à inspecter plus rapidement ces dernières et même susciter des questions de recherches peut-être omises autrement (citer Sievert, 2020). 

- ggplotly et plotly
- Tableaux interactifs? fonctions kable() et kableExtra du package knitr
- Shiny Apps




<!--
```{=html}

## Réflexion théorique

### Les options disponibles

Lorsque vous souhaitez créer des graphiques en R, les options abondent. De multiples *packages* ont été développés dans le but de visualiser des données. Heureusement, les choix diminuent lorsque l'on regarde ce qui est le plus utilisé dans la communauté. L'objectif n'est pas simplement de présenter les *packages* les plus courrants parce qu'ils sont les plus communs. Les *packages* les plus utilisés représentent des outils qui ont été grandement vérifiés et améliorés par la communauté en ligne, dont la documentation est abondante et pour lesquels les ressources d'aide en ligne sont innombrables. 

Trois options vous sont présentées: Base R, Lattice et ggplot2. Les avantages et inconvénients respectifs de ces trois approches pour la création de graphiques sont explicités dans les sections suivantes.

#### Avantages et inconvénients de Base R

Base R est le logiciel de base qui contient le langage de programmation R. Lorsque R Studio est installé sur un ordinateur, il est toujours possible d'utiliser le langage de base de R pour coder sans même avoir à installer des *packages*. Base R permet donc de produire des graphiques rapidement sans avoir à installer quoi que ce soit. 


Pour produire un graphique avec ce langage de base, il suffit de faire appel à la fonction *plot()* dans laquelle il est spécifié un x et y à partir d'une base de données et un graphiques est déjà créé. Les fonctions *barplot(), hist()* ou *boxplot()* ajoutés au graphiques permettent de spécifier le style de visualisation souhaitée.

## Réflexion théorique


Alors qu'un peu tout peut être fait avec Base R, ce langage demeure élémentaire; il est difficile d'innover dans la visualisation ou même de produire des graphiques moindrement sophistiqués. Base R peut sembler plus simple pour l'exploration de données ou pour produire des graphiques de base rapidement, mais ce langage devient vite complexe.

**Exemple Base R**

#### Avantages et inconvénients de Lattice

Développé par Deepayan Sarkar, Lattice est un système graphique qui implémente spécifiquement l'idée des graphiques à facettes, qui a été initialement développée pour des langages informatique comme *S* et *S-Plus* [sarkar23]. Ce langage vise à améliorer les graphiques de Base R en fournissant de meilleures valeurs par défaut et la possibilité d'afficher facilement des relations multivariées. Le package prend en charge la création de graphiques en treillis (afficher une variable ou la relation entre les variables, conditionné par une ou plusieurs autres variables). 

Pour produire un grpahique de base avec Lattice, le *package lattice* doit préalablement être installé sur l'ordinateur et chargé dans la session d'utilisation. Il suffit ensuite de spécifier un type de graphique, la formule qui lie x et y ainsi que les données qui serviront à produire le graphique (*graph_type(formula, data=)*).

Il est, de manière générale, plus complexe de se familiariser avec ce langage qui est moins instinctif et moins populaire; la communauté en ligne est donc moins développée.

**Exemple Lattice**

#### Avantages et inconvénients de ggplot2

Développé principalement par Hadley Wickham, **ggplot2** est un  *package R* faisant partie de la collection de *packages* de **tidyverse**. L'utilisation de **ggplot2** permet donc une adéquation avec d'autres *packages* centraux au développement de la visualisation des données et des analyses statistiques, comme  **dplyr** [@wickham_etal19]. Lorsque la **tidyverse** est utilisée de l'importation des données à leur visualisation graphique, la cohérence entre les *packages* présente l'avantage d'assurer qu'il n'y a pas de conflits entre les fonctions, et donc, réduit les erreurs introduites potentiellement. 


Avantages: tidyverse, beauté et possibilités infinies (on peut les animer!!!), beaux résultats même pour les débutants, rapidité pour l'exploration de données, facettes
          - Inconvénients: complexité potentielle, package extérieur, courbe d'apprentissage plus élevée


# Plan
- Question: Comment opimiser l'intelligibilité des données?
      - Communication et vulgarisation **Question : Est-ce qu'il nous faut nécessairement une question de recherche dans ce chapitre qui est plus technique**
      
- Réflexion théorique:
      - Différentes options disponibles (base R, lattice et ggplot2)
      - Avantages et inconvénients de ggplot2
          - Avantages: tidyverse, beauté et possibilités infinies (on peut les animer!!!), beaux résultats même pour les débutants, rapidité pour l'exploration de données, facettes
          - Inconvénients: complexité potentielle, package extérieur, Base R est toujours là, courbe d'apprentissage plus élevée **Montrer un exemple de graphique construit layer par layer (couche par couche)**
      - Comparaison
          - Base R: la fonction plot() de base ou avec arguments, les fonctions barplot(), hist(), boxplot(), les grids. Base R peut sembler plus siple pour l'exploration de données, mais de vient vite plus complexe (même pour visualiser avec grid).
          - Lattice: explication du package densityplot(), splom(), xyplot()
- Réflexion méthodologique :
      - Comment utiliser ggplot2:
          - Grammar of graphics: créer toutes sortes de graphiques à partir de quelques composants: data, geom, coordinate system et plot
          - Aesthetic propreties de base: size, color, emplacements de x et y
          - Transformation de la base de données d'origine directement dans le graphique (ex: stat)
      - Exemples et fonctionnalités
          - Graphiques les plus communs avec variables discrètes ou continues
          - Cartes
          - Visualisation de 3 variables
          - Visualisation des marges d'erreur, juste spécifier que l'option est possible
– Trucs et astuces :
      - ggplot2 cheat sheet
      - Pleins d'idées de visualisation en ligne et de codes adaptables disponibles
      - Retour sur la communication des données: choix du graphique en fonction des données et de l'objectif de communication
      
      
      -->

