# Outils de visualisation graphique

## Point d'observation: historique de la visualisation graphique
Ce chapitre a pour objectif de souligner l'importance de la visualisation des données tout au long du processus de recherche, depuis l'obtention des données pour l'analyse exploratoire des données (exploratory data analysis) jusqu'aux graphiques finaux de vos articles. La visualisation permet de valider les données, de déceler des anomalies, de découvrir des motifs et de formuler des hypothèses. En créant des graphiques simples, le chercheur peut rapidement obtenir une compréhension initiale de la structure des données et des relations potentielles entre les variables. Par la suite, il s'agit de trouver la meilleure manière de rendre l'information digeste pour les experts de votre discipline académique ou pour le grand public. Ainsi, la visualisation graphique des données est centrale, non seulement pour explorer et comprendre les données tout au long du processus de recherche, mais aussi pour vulgariser les résultats d'une recherche empirique.

Pour comprendre l'évolution de la visualisation graphique, il est utile de se tourner vers des travaux qui en tracent le développement historique. L’un des projets les plus complets à ce sujet est le *Milestones Project* de Michael Friendly et Daniel J. Denis. Cette initiative vise à compiler de manière exhaustive les jalons significatifs de la visualisation de données, de ses débuts à ses avancées contemporaines, et à rendre cette histoire accessible sous une forme interactive. Accessible en ligne, le Milestones Project propose une base de données dynamique qui recense les grands événements, les outils, les auteurs, et les approches ayant façonné le champ de la visualisation graphique [@friendly_etal16].

:::::: {.callout-note}
Pour plus d'informations sur le Milestones Project, consultez le site web du projet: [https://www.datavis.ca/milestones/index.php?page=introduction](https://www.datavis.ca/milestones/index.php?page=introduction).
:::

### Les origines de la visualisation graphique
On comprend rapidement que cette volonté de vulgariser des données à l'aide d'image ne date pas d'hier. En effet, les origines de la visualisation graphique remontent à des efforts rudimentaires pour représenter visuellement des données et des relations. Dès le 17e siècle, les cartes thématiques font leur apparition, notamment avec des représentations géographiques de phénomènes physiques et sociaux. Ces premières tentatives permettent de traduire des concepts abstraits (comme les populations ou les routes commerciales) en formes visuelles. Le 18e siècle voit l’émergence des premiers graphiques statistiques avec l’œuvre de William Playfair, qui introduit des outils tels que les diagrammes en barres et les graphiques en lignes. Ces innovations ouvrent la voie à une approche plus intuitive de la présentation des données, permettant aux lecteurs de mieux comprendre les relations quantitatives [@friendly_wainer21].

### La période moderne : Un premier âge d’or
L’histoire de la visualisation graphique connaît une accélération marquée au 19e siècle, qualifiée de premier âge d’or de la visualisation graphique [@friendly08]. C’est une période caractérisée par une floraison d’innovations en matière de visualisation des données, principalement en réponse à une collecte systématique et extensive de données par les gouvernements et les scientifiques. Charles Joseph Minard se distingue à cette époque par ses cartes de flux, dont la célèbre représentation de la campagne russe de Napoléon en 1812, qui illustre avec clarté les pertes humaines au fil de la progression de l’armée. Cette carte narrative complexe superpose des informations géographiques, temporelles et statistiques, démontrant le potentiel des graphiques pour raconter des histoires puissantes et nuancées.
L’essor de la statistique comme discipline académique contribue également à l’épanouissement de nouvelles formes de visualisation. Francis Galton, avec ses diagrammes de corrélation, amorce l'exploration de la relation entre variables, ouvrant la voie à des outils analytiques tels que le scatterplot (nuage de points). L’introduction de ces représentations graphiques met en évidence le rôle fondamental des visualisations dans la compréhension de phénomènes complexes, que ce soit dans les sciences sociales ou naturelles [@friendly_wainer21].

### L’ère informatique : de nouvelles possibilités

Avec l’avènement de l’ère informatique au 20e siècle, la visualisation graphique entre dans une nouvelle phase de développement. La capacité des ordinateurs à traiter de grandes quantités de données rapidement et efficacement transforme la manière dont les graphiques sont créés et utilisés. Les années 1960 voient l’émergence des premières visualisations générées par ordinateur, ouvrant la voie à des représentations plus complexes et dynamiques.

Avec l’ère informatique, la visualisation graphique est entrée dans une phase de transformation, marquée par la capacité des ordinateurs à traiter rapidement de vastes quantités de données. Dès les années 1960, les premières visualisations générées par ordinateur ont ouvert la voie à des graphiques plus complexes. Dans les années 1980 et 1990, des logiciels comme *SAS* et *SPSS* ont rendu ces outils accessibles à un public plus large. Durant cette période, l’intérêt pour l'esthétique et l’interactivité, promu notamment par Edward Tufte, a renforcé l’importance de la visualisation comme moyen de communication efficace des données [@friendly_wainer21].

Aujourd'hui, la visualisation graphique continue d’évoluer à un rythme effréné, s’appuyant sur des technologies toujours plus sophistiquées. Avec l'essor des données massives (*Big data*) et de l'intelligence artificielle, les outils de visualisation sont devenus essentiels pour interpréter rapidement des volumes importants d'informations. Les visualisations sont désormais interactives, dynamiques, et conçues pour s’adapter à différents publics, allant des décideurs aux scientifiques. 


## Arpentage et choix éditorial

Le langage *R* s'est imposé comme un outil de référence pour la visualisation de données, particulièrement dans les domaines de la recherche et de l'analyse statistique. Plusieurs facteurs expliquent cette popularité : *R* est un logiciel libre et gratuit, bénéficiant d'une communauté d'utilisateurs très active qui développe et maintient des milliers de packages spécialisés. Cette nature libre assure une transparence complète du code, facilitant la reproductibilité des analyses — un critère essentiel dans la recherche scientifique.

La flexibilité de *R* constitue également un atout majeur. Contrairement aux logiciels propriétaires comme *Excel* ou *Tableau*, *R* permet une personnalisation poussée des visualisations et s'intègre facilement dans des flux de travail automatisés. Cette adaptabilité en fait un choix privilégié pour les analystes qui souhaitent créer des visualisations sur mesure plutôt que de se limiter à des modèles prédéfinis.

Au sein de l'écosystème *R*, plusieurs systèmes graphiques coexistent, chacun avec ses spécificités. Le tableau 6 présente une comparaison de ces différentes approches.

Dans *R* de base (*base R*), les graphiques sont créés de manière procédurale, en construisant les éléments un par un. Le package *lattice* offre une approche plus structurée, particulièrement efficace pour les graphiques conditionnels. Cependant, c'est *ggplot2* qui révolutionne véritablement la création de graphiques en *R* en implémentant une grammaire cohérente de la visualisation.

Notre choix éditorial se porte sur *ggplot2*, développé par Hadley Wickham, qui repose sur la "Grammaire des graphiques" (*Grammar of Graphics*) théorisée par Leland Wilkinson [@wilkinson05]. Cette approche conceptualise un graphique comme la combinaison de composants indépendants : les données, les mappings esthétiques (couleur, forme, taille), les objets géométriques (points, lignes, barres), les transformations statistiques, et les systèmes de coordonnées.

Cette grammaire présente plusieurs avantages pédagogiques et pratiques. Elle offre un cadre conceptuel unifié pour comprendre et créer des visualisations, réduisant l'apprentissage par cœur de syntaxes spécifiques. Les graphiques se construisent par couches successives, permettant une approche itérative et modulaire. Cette logique facilite non seulement l'apprentissage pour les novices, mais permet également aux utilisateurs expérimentés de concevoir des visualisations innovantes en combinant les composants de manière créative.

Les sections suivantes de ce chapitre exploreront en détail les principes de *ggplot2* et illustreront comment cette grammaire des graphiques peut transformer votre approche de la visualisation de données.



```{r}
#| echo: false
#| warning: false
library(tidyverse)
library(tinytable)

tbl_systemes_graphiques_r <- tibble(
    Système = c('Base R', 'Lattice', 'ggplot2'),
    Approche = c('Procédurale', 'Conditionnelle', 'Grammaire des graphiques'),
    'Facilité d\'apprentissage' = c('Complexe pour graphiques avancés', 'Modérée', 'Intuitive avec la grammaire'),
    Flexibilité = c('Haute mais laborieuse', 'Modérée', 'Haute et cohérente'),
    'Cas d\'usage privilégiés' = c('Graphiques simples et rapides', 'Graphiques conditionnels', 'Visualisations complexes et publications')
)

tt(tbl_systemes_graphiques_r, width = 3, caption = 'Comparaison des systèmes graphiques dans R')



```


## Manuel d'instruction:: la grammaire des graphiques et ggplot2  

La force de *ggplot2* réside dans sa mise en œuvre de la *Grammar of Graphics*, qui décompose tout graphique en éléments fondamentaux. Hadley Wickham [@wickham10] développe une approche dite *layered grammar of graphics*, où un graphique est construit par superposition de couches (*layers*). Chacune de ces couches combine des données, une transformation statistique éventuelle, un objet géométrique (*geom*), et des mappings esthétiques définis par l’utilisateur. Cette architecture reflète la vision de Wilkinson, Anand et Grossman [@wilkinson_etal05], qui ont cherché à formaliser les principes universels de la visualisation.  

Concrètement, *ggplot2* permet de spécifier de manière explicite et déclarative les différents composants d’un graphique. La fonction `aes()` définit les **mappings esthétiques**, c’est-à-dire le lien entre les variables du jeu de données et leurs attributs visuels (position sur les axes, couleur, taille, forme). Les **objets géométriques** (*geoms*) déterminent la nature de la représentation : `geom_point()` trace des points, `geom_line()` des lignes, `geom_bar()` des barres, etc. Chaque *geom* peut être associé à une **transformation statistique** (*stat*), par exemple `stat_smooth()` pour ajouter un lissage ou `stat_bin()` pour construire un histogramme.  

À ces éléments s’ajoutent les **échelles** (`scale_x_log10()`, `scale_color_manual()`), qui traduisent les valeurs des données en valeurs perceptibles, et les **systèmes de coordonnées** (`coord_cartesian()`, `coord_polar()`), qui définissent la projection de l’espace graphique. Les **facettes** (`facet_wrap()`, `facet_grid()`) permettent de subdiviser le graphique en multiples panneaux pour comparer des sous-groupes. Enfin, la fonction `theme()` ajuste l’apparence générale du graphique (grilles, polices, arrière-plans), tandis que `labs()` ajoute des titres et des étiquettes.  

```{r, out.width="80%"}
#| label: fig-grammar_graphic
#| echo: false
#| fig-cap: "La logique en couches de la grammaire des graphiques [^chapitre_6-2]."
knitr::include_graphics("images/chapitre6_grammar_graphic.png", dpi = 600)
```

[^chapitre_6-2]: [Image provenant du site officiel de ggplot2](https://ggplot2.tidyverse.org/articles/ggplot2.html).


Cette approche modulaire et incrémentale distingue *ggplot2* des systèmes graphiques traditionnels. Comme le souligne Wickham [@wickham09, chap. 1], l’utilisateur peut commencer par un nuage de points simple, puis enrichir le graphique par ajouts successifs : annotations, résumés statistiques, facettes ou encore ajustements esthétiques. Cette logique rend possible la création de graphiques élégants et reproductibles, mais surtout adaptés aux besoins analytiques précis du chercheur. Elle transforme la visualisation en un véritable langage, où chaque composant est indépendant et combinable, facilitant ainsi l’exploration et la communication des données.

En voici un exemple: HUBERT

### Aller plus loin: La visualisation interactive des données

Si jusqu'à présent la visualisation des données a été présentée comme une étape servant à exposer les résultats de recherches, elle peut également être perçue comme un outil précieux pour l'exploration de données multidimensionnelles. En effet, les visualisations interactives offrent la possibilité d'explorer et même d'analyser les données directement à partir des graphiques ou tableaux. Cela permet non seulement de mieux appréhender la structure des données, mais aussi de les inspecter plus efficacement, tout en suscitant des questions de recherche qui auraient pu être négligées autrement [@sievert20].

#### Graphiques interactifs

Les graphiques interactifs permettent une exploration dynamique des données, offrant aux utilisateurs la possibilité de zoomer, survoler des points pour obtenir plus d’informations, et d’examiner les relations entre variables de manière plus intuitive. En R, les packages `ggplotly` et `plotly` permettent de créer facilement des graphiques interactifs à partir de visualisations statiques.

:::::: {.callout-note}
Note: Le rendu de graphiques interactifs n'est pas possible dans un document PDF. Par conséquent, seuls les codes sont fournis ci-dessous. Vous pouvez essayer ces codes dans votre environnement de développement pour voir le résultat.
:::

##### Exemple avec `ggplotly`

`ggplotly` permet de transformer un graphique `ggplot2` en une visualisation interactive.

```{r}
#| message: false
library(ggplot2)
library(plotly)
```
```{r}
#| eval: false
# Ce package, webshot2, peut être nécessaire pour visualiser
#  des graphiques interactifs

#install.packages("webshot2")

# Création d'un graphique ggplot
p <- ggplot(mtcars, aes(x = hp, y = mpg)) +
  geom_point() +
  labs(title = "Effet de hp sur mpg")

# Transformation en graphique interactif
ggplotly(p)
```

Et voici un exemple avec `plotly`, un package qui n'emprunte pas la grammaire de `ggplot2`:

```{r}
#| eval: false
# Création d'un graphique interactif avec plotly
fig <- plot_ly(
  data = mtcars,
  x = ~hp, y = ~mpg,
  type = 'scatter',
  mode = 'markers'
  ) %>%
  layout(title = "Effet de hp sur mpg")

fig
```

Nous vous recommandons vivement de consulter la documentation officielle des packages `plotly` et `ggplotly` pour découvrir toutes les options et fonctionnalités disponibles, afin d'enrichir vos graphiques interactifs.


#### Tableaux interactifs

Les tableaux interactifs sont très utiles pour rendre la présentation des données plus engageante et informative. Les fonctions `kable()` et `kableExtra` permettent de créer des tableaux élégants et interactifs directement dans R.

##### Exemple avec `kable()`

La fonction `kable()` de `knitr` permet de transformer un dataframe en un tableau bien formaté.

```{r}
library(knitr)

# Création d'un tableau avec kable
kable(head(mtcars), caption = "Exemple de tableau avec kable")
```

#### Exemple avec `kableExtra`

Le package kableExtra permet de personnaliser et d'enrichir les tableaux créés avec kable(), notamment en ajoutant des options interactives comme des couleurs ou des styles.

```{r}
#| message: false
library(kableExtra)
```
```{r}
# Création d'un tableau interactif avec kableExtra
kable(
  head(mtcars),
  caption = "Exemple de tableau avec la colonne hp colorée en rouge"
  ) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
  column_spec(5, background = "red")
```


#### Applications interactives avec Shiny

`shiny` est un package R puissant qui permet de créer des applications web interactives sans avoir besoin de compétences avancées en développement web. Il permet de relier facilement des données, des visualisations et des contrôles interactifs, rendant les analyses accessibles à un large public via une interface web.


##### Exemple de base avec `shiny`

Voici un exemple simple d'application `shiny` où l'utilisateur peut sélectionner une variable pour tracer un graphique interactif. Si le package `shiny` est installé sur votre poste, vous pouvez simplement copier ce code dans un script R sous RStudio, puis lancer l'application web directement.

```{r}
#| eval: false
#| label: shiny
library(shiny)
library(ggplot2)

# Interface utilisateur
ui <- fluidPage(
  titlePanel("Exemple d'application Shiny"),
  sidebarLayout(
    sidebarPanel(
      selectInput("var", "Choisir une variable:",
                  choices = names(mtcars))
    ),
    mainPanel(
      plotOutput("plot")
    )
  )
)

# Serveur
server <- function(input, output) {
  output$plot <- renderPlot({
    ggplot(mtcars, aes_string(x = input$var, y = "mpg")) +
      geom_point() +
      labs(title = paste("Effet de", input$var, "sur mpg"))
  })
}

# Lancement de l'application
shinyApp(ui = ui, server = server)
```

Cette application simple permet à l'utilisateur de choisir une variable dans le jeu de données mtcars pour voir son impact sur la consommation de carburant (`mpg`), visualisée à travers un graphique interactif.

Pour explorer davantage les possibilités de `shiny`, nous vous recommandons de consulter la documentation officielle du package `shiny` ainsi que les forums en ligne qui proposent des exemples plus complexes et des fonctionnalités avancées pour enrichir vos applications.
