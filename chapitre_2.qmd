# Les langages de programmation {#sec-chap2}

\begin{center}
\textit{Marc-Antoine Rancourt\footnotemark[1], 
Laurence-Olivier M. Foisy\footnotemark[2]}
\end{center}

\footnotetext[1]{University of Toronto}
\footnotetext[2]{Université Laval}

## Point d'observation : qu'est-ce que c'est, la programmation ? 

La programmation est une manière de donner des instructions à un ordinateur pour qu’il exécute des tâches précises.
On utilise pour cela des langages de programmation. 
Ces langages ont des règles beaucoup plus strictes que les langues traditionnelles comme le français ou l’anglais.
Chaque ligne (ou phrase), doit être claire et respecter une syntaxe définie pour que l’ordinateur comprenne.
Une simple erreur de syntaxe comme l'oubli d'une virgule ou une faute de frappe peut empêcher un programme de fonctionner correctement.

Un langage de programmation sert d’intermédiaire entre l’humain et la machine.
Il permet de traduire des idées ou des méthodes en une suite d’opérations exécutables.
On peut ainsi automatiser des calculs statistiques, transformer et visualiser des données, ou développer des applications.

Il existe différents niveaux de langages.
Les langages de haut niveau, comme R, Python ou Java, sont conçus pour être lisibles et expressifs. 
Ils sont faciles à comprendre et se rapprochent du langage naturel.
Ils permettent de se concentrer sur la logique et les objectifs de l’analyse, sans gérer les détails techniques du matériel.
Ce sont les langages les plus couramment utilisés en sciences sociales.
Les langages de bas niveau, comme l’Assembleur, se rapprochent du langage machine.
Ils offrent un contrôle fin sur l’ordinateur, mais sont plus difficiles à apprendre et rarement utilisés en sciences sociales.

Chaque langage possède des domaines d’application privilégiés.
R est largement utilisé pour les statistiques et la visualisation.
Python est polyvalent et sert autant pour l’analyse de données que pour l’intelligence artificielle ou le développement d’applications.
SQL est spécialisé dans les bases de données.
HTML et CSS structurent et stylisent des pages web.
C et Rust sont réputés pour leurs performances dans des systèmes complexes.
Cette diversité reflète l’évolution des besoins et permet de choisir l’outil le mieux adapté à un projet donné.

Apprendre à programmer ne se résume pas à mémoriser une syntaxe.
Il s’agit aussi d’acquérir une manière de raisonner : logique, structurée et reproductible.
Ces compétences sont utiles pour travailler avec des données, mais aussi pour résoudre des problèmes dans d’autres contextes.
Aujourd’hui, la programmation est une compétence fondamentale en sciences sociales, car elle permet d’automatiser des tâches, d’analyser des données à grande échelle et de partager des résultats de façon transparente.

## Arpentage et choix éditorial : quel langage apprendre ?

Pour choisir quel langage de programmation apprendre, il faut d'abord considérer ses objectifs personnels et professionnels.
Bien que la majorité des principaux langages de programmation peuvent aujourd'hui réaliser une grande variété de tâches, ils ont tous leurs spécialités et leurs avantages.
Si l'objectif est de développer des sites Web, JavaScript est incontournable, tandis qu'HTML et CSS constitueront les bases du design Web.
Pour ceux qui s'intéressent à l'analyse de données ou à la recherche scientifique, Python ou R représentent d'excellents choix grâce à leurs nombreuses bibliothèques spécialisées.
Julia peut être intéressant pour faire de la science des données et de l'apprentissage machine.
L'apprentissage d'un langage de programmation demande une certaine quantité d'efforts et de temps.
Il est recommandé de commencé son apprentissage avec des langages tels que Python et R en raison de leurs syntaxes claires et intuitives qui ressemblent au langage naturel.
En effet, cela permet au programmeur débutant de se concentrer sur les concepts fondamentaux de la programmation, tels que les variables, les boucles et les fonctions, sans être découragé par une syntaxe complexe.
L'environnement d'apprentissage et les ressources disponibles en ligne jouent également un rôle important sur le choix d'un langage de programmation.
Python et R ont des communautés très actives en plus d'une grande quantité de documentations et d'innombrables tutoriels gratuits, permettant l'apprentissage autonome et efficace.
Les programmeurs débutants peuvent s'inscrire sur des sites tels que DataCamp, Codecademy et Coursera, afin d'obtenir une structure dans leur apprentissage.

En contraste aux langages de programmation précédemment mentionnés, dont le code source est ouvert, il existe des logiciels propriétaires comme SAS, STATA, Excel et SPSS.
Ces logiciels présentent plusieurs avantages spécifiques qui peuvent justifier leur choix par rapport aux langages de programmation généralistes.
L'accessibilité et la facilité d'utilisation constituent l'argument principal en leur faveur.
Les logiciels propriétaires peuvent être installés et utilisés rapidement, contrairement aux langages de programmation qui exigent une maîtrise de la syntaxe et des concepts algorithmique.
Ces logiciels se distinguent des langages de programmation par leur interface graphique intuitive permettant de réaliser rapidement des analyses statistiques complexes.
Cette approche dite du *point-and-click* élimine pour plusieurs utilisateurs la barrière d'entrée technique.
De plus, elle permet aux chercheurs de se concentrer sur l'interprétation des résultats plutôt que sur l'apprentissage de la programmation.
Ceci est particulièrement utile pour des utilisateurs occasionnels ou pour des chercheurs dans des domaines où l'analyse statistique n'est qu'un outil parmi d'autres.


### Pourquoi choisir le langage de programmation R ?

Le langage de programmation R présente des avantages uniques qui en font un choix pertinent pour la recherche en science sociales numériques spécifiquement, et la science des données plus généralement.
Le plus grand avantage est que le code source est ouvert.
Cela signifie que le langage de programmation R est gratuit d'utilisation et développé par les utilisateurs et non par un grande entreprise. Cela lui procure une plus grande flexibilité et permet aux utilisateurs de modifier le langage pour répondre à leurs besoins spécifiques.
Le nombre d'utilisateurs est d'ailleurs en croissance importante depuis plusieurs années.
Pour les institutions académiques, les startups ou les organisations à budget limité, le langage de programmation R permet d'accéder à des capacités d'analyse de niveau professionnel sans investissement financier important.
Cette gratuité ne se limite pas aux coûts d'achat de licence.
Elle s'étend à l'ensemble de l'écosystème R, notamment à l'accès à la formation, à la documentation et aux différents fonctionnalités.
Les *packages* sont des groupes de fonctionnalités et d'extensions créées et utilisées par les usagers du langage de programmation R afin d'étendre les possibilités offertes de base.
De nouveaux *packages* comportant notamment de nouvelles méthodes statistiques et de visualisations graphiques sont constamment ajoutés et améliorés. Ainsi, le développement du langage se fait de manière décentralisée et toute personne sachant programmer en R peut collaborer à cette communauté.
Les packages sont regroupés sur le *Comprehensive R Archive Network* (CRAN) (voir le https://cran.r-project.org/ pour plus d'information).
Bien que le site a une politique de dépôt stricte et les packages doivent être suffisamment documentés, il n'y a pas d'autorité décisionnelle centrale.

Cette richesse de l'écosystème signifie que pratiquement toutes les techniques et méthodes statistiques, des plus classiques aux plus récentes, sont disponibles et utilisables dans R. Il est souvent dit que R est un langage de programmation développé par des statisticiens, pour des statisticiens.
Qui plus est, les différents *packages* sont généralement très « clés en main » ce qui est avantageux pour les programmeurs débutants.
Ils sont aussi souvent bâtis sur des fondations communes permettant également aux programmeurs plus avancés de personnaliser et d'adapter leur code aux besoins de leurs analyses.
Les caractéristiques du langage de programmation R permet aussi la réplicabilité des résultats, même lorsqu'il y a des changements de version ou des nouvelles fonctions.
Ce n'est pas toujours le cas avec les logiciels propriétaires qui changent parfois certaines fonctionnalités entre les versions.
Les logiciels propriétaires sont souvent coûteux, rigides et l'ajout de fonctionnalités se fait par les développeurs internes à la compagnie.
Ces formalités rendent le processus plus lent et réduisent l'éventail des possibilités pour l'utilisateur.
Le fait que SAS et SPSS permettent à leurs utilisateurs d'intégrer des éléments de programmation R à leur logiciels est un indicateur fort ne serait-ce que de l'utilité de R pour tous.

Bien entendu, il existe un constant débat en sciences sociales numériques sur le langage de programmation le plus approprié à apprendre et à enseigner.
<!-- Comme discuté ci-dessus, apprendre le langage de programmation R a de nombreux avantages. -->
<!-- Toutefois, certains notent que le langage de programmation R peut avoir des inconvénients. -->
<!-- La courbe d'apprentissage peut être plus grande que celle de logiciels à licence. -->
<!-- Bien que l'apprentissage de ces logiciels aient aussi un coût d'entrée, ils peuvent apparaître être plus intuitifs et facile d'accès. -->
<!-- Le développement en source ouverte, spécifiquement celui du langage de programmation R, peut sembler se faire de façon anarchique. -->


<!-- Considérant les avantages et les inconvéninents sur langage de programmation R, certains chercheurs en sciences sociales numériques préfèrent d'autres langages de programmation tels que Python et Julia. -->
Python est un langage de programmation considéré comme plus généraliste qui permet de développer des applications Web, des logiciels et des modèles d'apprentissage machine et d'intelligence artificielle.
Sa syntaxe est considérée par certains comme étant plus intuitive et proche du langage naturel, en plus de bénéficier d'une communauté d'utilisateur plus vaste et diversifiée que R.
De plus, dans certains domaines, le marché de l'emploi offre plus d'opportunités pour les utilisateurs de Python.
Toutefois, il n'est pas aussi performant que R pour l'analyse et la visualisation de données.
Pour sa part, Julia est avantageux pour des calculs intensifs ou de la modélisation mathématique.
En fait, Julia est conçu pour être aussi rapide que C ou Fortran tout en restant aussi simple que Python. Le langage a été créé dès le départ pour le calcul haute performance et la recherche scientifique moderne.
Toutefois, Julia reste moins populaire que R, avec moins de *packages* spécialisés, surtout pour les analyses statistiques.
Bien que pertinent et important, le débat sur le choix d'un langage de programmation est sans fin.
Il n'y a pas de réponse définitive et objective à savoir quel langage de programmation un chercheur en sciences sociales numériques devrait apprendre.
Le choix dépend des objectifs spécifiques propres à chacun.
Cependant, considérant les tâches à effectuer et la communauté de chercheurs travaillant déjà en R, apprendre le langage de programmation R est un excellent choix.


```{r}
#| tbl-cap: Résumé des principaux outils de programmation
#| echo: false
#| message: false
#| warning: false

library(tidyverse)
library(gt)

tbl_resume_chap_prog <- tibble(
  Critères = c(
    "Accessibilité",
    "Existence d'une communauté d'utilisateurs",
    "Popularité en sciences sociales",
    "Compatibilité avec d'autres outils",
    "Transparence et réplicabilité",
    "Adaptabilité et flexibilité"
  ),
  `Logiciels propriétaires (SAS, SPSS, STATA)` = c(
    "Dispendieux", "Grande", "De moins en moins populaires",
    "Demande un peu d'ajustement", "Faible", "Peu flexible"
  ),
  Python = c(
    "Gratuit", "Très grande", "De plus en plus populaire",
    "Facilement compatible", "Excellent", "Très flexible"
  ),
  Julia = c(
    "Gratuit", "En croissance", "Peu populaire",
    "Demande un peu d'ajustement", "Bonne", "Très flexible"
  ),
  R = c(
    "Gratuit", "Très grande",
    "Très populaire",
    "Facilement compatible", "Excellent", "Très flexible"
  )
)

tbl_resume_chap_prog |>
  gt() |>
  # Légende du tableau
  tab_caption("Résumé des principaux outils de programmation pour l’analyse de données") |>
  # Libellés de colonnes (avec saut de ligne dans l’en-tête long)
  cols_label(
    Critères = "Critères",
    `Logiciels propriétaires (SAS, SPSS, STATA)` = md("Logiciels propriétaires<br>(SAS, SPSS, STATA)"),
    Python = "Python",
    Julia = "Julia",
    R = "R"
  ) |>
  # Alignements + largeurs
  cols_align("left", columns = everything()) |>
  cols_width(
    Critères ~ pct(32),
    `Logiciels propriétaires (SAS, SPSS, STATA)` ~ pct(17),
    Python ~ pct(17),
    Julia ~ pct(17),
    R ~ pct(17)
  ) |>
  # Style “booktabs” + entêtes en gras
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = cells_column_labels(everything())
  ) |>
  opt_table_lines() |>
  # Typo / espacement (mêmes réglages que ton modèle)
  tab_options(
    table.font.size = px(12),
    data_row.padding = px(11),
    column_labels.background.color = "white",
    table.width = pct(95)
  )
```


### Une brève histoire du langage de programmation R

L'histoire du langage de programmation R s'inscrit dans une évolution constante des besoins et des méthodes en sciences sociales.
Avant l'ère numérique, l'analyse de données se faisait principalement à la main ou à l’aide de calculatrices mécaniques, avec des méthodes statistiques standardisées, mais limitées par la capacité humaine à traiter des volumes massifs d’informations.
Ces contraintes ont poussé les chercheurs à chercher des moyens plus efficaces de manipuler les données, ce qui a ouvert la voie à l’ère informatique et aux premiers logiciels dédiés à la statistique.
Dans les années 1960 et 1970, les premiers langages et logiciels statistiques, tels que SPSS (1968), SAS (1976), STATA (1985) et Excel (1985) ont vu le jour.
Ces outils permettaient aux chercheurs d’automatiser les calculs statistiques complexes sur des ordinateurs de grande taille, en accélérant considérablement les analyses.
Ces logiciels propriétaires ont joué un rôle crucial dans la standardisation de l’analyse statistique en sciences sociales, en offrant des plateformes robustes, mais souvent coûteuses et rigides.

L’émergence du logiciel libre dans les années 1990 à influencer le domaine de la statistique.
C’est dans ce contexte que le langage R a été créé, en 1993, par Ross Ihaka et Robert Gentleman, à l’Université d’Auckland, en Nouvelle-Zélande.
R est basé sur le langage de programmation S, développé chez Bell Labs à la fin des années 1970.
Contrairement à ses prédécesseurs propriétaires, R a été conçu pour être gratuit, flexible et extensible, ce qui en a fait un outil populaire parmi les chercheurs qui désiraient personnaliser leurs analyses tout en ayant accès à des ressources communautaires.
Les créateurs du langage de programmation S -- et ceux de R par extension -- ne viennent pas du milieu de la programmation classique.
En effet, l'objectif à la base de ces langages était de rendre plus facile et accessible l'analyse de données.
Le langage de programmation R a répondu à des besoins pressants de la communauté scientifique de l'époque : pouvoir accéder à des outils puissants sans avoir à payer des licences onéreuses et de bénéficier d’une liberté totale dans le développement de nouvelles méthodes d’analyse.
Grâce à sa structure ouverte, R a rapidement évolué dû aux contributions de statisticiens et de programmeurs du monde entier, devenant l’un des langages de programmation les plus populaires pour l’analyse de données.
Aujourd’hui, il est largement utilisé non seulement en sciences sociales, mais aussi en biostatistique, en économie et en science des données.
Avec l'émergence des mégadonnées et de la science des données, le langage de programmation R est incontournable.
Des entreprises telles que RStudio (renommée Posit) développent des outils intégrés qui rendent R plus accessible et qui permettent d'aller encore plus loin, poussant les limites d'un langage souvent perçu comme étant principalement utilisé pour l'analyse de données.
L'écosystème R se diversifie avec des packages comme *ggplot2* (servant à la visualisation graphique), *dplyr* (servant à la manipulation et au traitement de données), ou *Shiny* (qui permet de faire applications Web interactives).

L’évolution des langages de programmation, notamment le langage de programmation R, illustre comment les besoins des chercheurs en termes de flexibilité, d’accessibilité et de partage ont façonné les outils que nous utilisons aujourd’hui.
Au fil des décennies, les langages se sont adaptés aux nouvelles méthodes et à l’augmentation des capacités de calcul, offrant des possibilités toujours plus larges pour l’exploration et l’analyse de données.


## Manuel d'instruction : apprendre à programmer en R

### Où coder en R ?

La programmation peut se faire de différentes façons, mais un point commun entre tous les langages est la nécessité pour l'utilisateur de communiquer avec son ordinateur.
Cette communication peut se faire par le terminal ou directement dans l'éditeur du langage.
Elle peut aussi se faire dans un environnement de développement intégré (IDE).
Les IDE permettent aux programmeurs de centraliser les différents aspects de l'écriture d'un programme informatique.
Il permet de réaliser toutes les activités courantes d'un programmeur -- l'édition du code, la construction des exécutables et le débogage -- au même endroit.
Les environnements de développement intégrés sont conçus pour maximiser la productivité des programmeurs.
L'utilisation d'un IDE n'est pas obligatoire, mais elle facilite la tâche des programmeurs, surtout pour les utilisateurs débutants.
Ils fournissent de nombreuses fonctionnalités, notamment la coloration syntaxique (le surlignage des éléments du code) et le contrôle de version, pour créer, modifier et compiler du code.
Certains environnements de développement intégré sont dédiés à un langage de programmation spécifique.
Par conséquent, ils contiennent des fonctionnalités qui sont plus adaptées aux paradigmes de programmation du langage auquel ils sont associés.
Enfin, il existe de nombreux environnements de développement intégré multilingues qui peuvent notamment comprendre le langage de programmation R, mais aussi le langage de balisage LaTeX, le langage de programmation Python, etc.

Comme mentionné précédemment, le langage de programmation R est l'un des langages de statistiques et d'exploration de données les plus populaires en sciences sociales numériques.
Le langage de programmation R est pris en charge par de nombreux environnements de programmation.
Plusieurs ont été spécialement conçus pour la programmation en R, le plus notable étant *RStudio*, tandis que d'autres sont des environnements de programmation universels, tels que *Visual Studio Code* qui prennent en charge R via des extensions et des modules complémentaires.

<!-- Il est également possible de coder en R à partir d'une interface en ligne de commande. -->
<!-- Une telle méthode permet la communication entre l'utilisateur et son ordinateur. -->
<!-- Cette communication s'effectue en mode texte : l'utilisateur tape une « ligne de commande » -- c'est-à-dire du texte dans la console -- pour demander à son ordinateur d'effectuer une opération précise, telle que l'exécution d'un fichier de code R. -->


### Qu'est-ce que RStudio ?

RStudio (maintenant appelé Studio IDE par Posit) est un projet en logiciel libre destiné à regrouper les différentes composantes du langage de programmation R en un seul outil.
RStudio fonctionne sur tous les systèmes d'exploitation, y compris Windows, Mac OS et Linux.
Il existe trois versions de RStudio : RStudio Desktop, qui est une version gratuite pour usage sur les ordinateurs personnels, RStudio Server, une version web accessible via le navigateur, et RStudio Workbench : une version professionnelle avec fonctionnalités avancées pour les entreprises.
RStudio facilite l'utilisation du langage de programmation R en offrant de nombreux outils permettant à l'utilisateur de réaliser aisément ses tâches.
Parmi les outils les plus utiles, on retrouve notamment une fenêtre d'aide, de la documentation sur les différents packages R, un navigateur de l'environnement de travail, une visionneuse de données, ainsi que la prise en charge de la coloration syntaxique.
De plus, RStudio permet de coder dans plusieurs langages et de gérer une grande variété de formats.


### Pourquoi choisir RStudio ?

RStudio présente plusieurs avantages.
Son utilisation est facile à apprendre pour les débutants.
Les principaux éléments d'un IDE sont intégrés dans une interface à quatre volets.
Cette disposition comprend une console, un éditeur de code source à onglets pour organiser les fichiers d'un projet, un espace dédié à l'environnement de travail, et un quatrième volet permettant d'afficher des graphiques ou de consulter la documentation sur les différents packages.
Ce volet permet également d'accéder au répertoire des packages disponibles pour R et à l'arborescence des fichiers de l'utilisateur.
De plus, l'IDE RStudio permet de créer des projets qui organisent automatiquement les fichiers, scripts, données et résultats.
Cela facilite grandement la reproductibilité et le partage du travail.

Il existe plusieurs autres aspects de RStudio que les programmeurs apprécient.
Parmi eux, le fait que l'application peut être utilisée via un navigateur Web pour un accès à distance.
Malgré son nom, RStudio prend en charge plusieurs langages de programmation ainsi que différents langages de balisage.
Par exemple, RStudio excelle dans la création de documents R Markdown, permettant de mélanger code, texte et résultats pour créer des rapports, présentations ou sites web dynamiques.
Il permet aussi d'utiliser des langages de balisages tels que Markdown et LaTeX.
Qui plus est, de nouvelles fonctionnalités sont régulièrement ajoutées pour répondre aux besoins de la communauté scientifique.
RStudio inclut également nativement le contrôle de version Git, facilitant la collaboration et le suivi des modifications pour le travail en équipe.

Parmi ce que certains considèrent comme les points faibles de RStudio, on retrouve des éléments liés à la configuration.
Certains utilisateurs trouvent que le nombre de raccourcis est limité.
D'autres jugent que l'organisation des différents panneaux n'est pas ergonomique, ou que la personnalisation de l'environnement de programmation est insuffisante.
De plus, certains utilisateurs ont rapporté que RStudio était plus lent que d'autres alternatives pour certaines opérations, notamment celles impliquant de longs scripts.


### Comment utiliser RStudio ?

Bien que de nombreux éléments puissent être personnalisés, la disposition par défaut de RStudio est composée de quatre volets principaux.
Dans le coin supérieur gauche se trouve le volet principal.
C'est dans celui-ci que l'utilisateur passera la majeure partie de son temps.
On y modifie des fichiers de différents formats et il est possible d'y afficher des bases de données.
Dans le coin inférieur gauche se trouvent la console et le terminal. Dans la console, on peut interagir avec R de la même manière que dans le volet principal, mais le code ne sera pas enregistré.
Le terminal, quant à lui, est le point d'accès pour la communication entre l'utilisateur et son ordinateur.
Bien que les différents systèmes d'exploitation soient livrés avec un terminal intégré, il est également possible d'y accéder à partir de RStudio.

Dans le coin supérieur droit, on retrouve l'espace de travail.
Ce volet contient trois éléments : l'environnement global, l'historique et les connexions.
L'environnement global est l'endroit où l'utilisateur peut voir les bases de données, les fonctions et les différents autres objets R actifs.
Il peut cliquer sur les divers éléments actifs pour les consulter.
L'onglet historique permet à l'utilisateur de consulter les derniers morceaux de code R qu'il a exécutés ainsi que les dernières commandes saisies dans la console.
L'onglet connexions, quant à lui, permet de connecter l'IDE à une variété de sources de données et d'explorer les objets et données qu'elles contiennent.
Il est conçu pour fonctionner avec divers outils permettant de travailler avec des bases de données en R dans RStudio.

Le volet dans le coin inférieur droit, quant à lui, contient plusieurs outils très utiles pour les utilisateurs de RStudio.
L'onglet *Files* permet de naviguer dans les fichiers présents sur l'ordinateur sans avoir à quitter RStudio.
L'onglet *Plots* permet de visualiser les graphiques générés à partir de R, que ce soit en utilisant ggplot2, lattice ou base R.
L'onglet *Packages* permet de consulter les packages installés précédemment par l'utilisateur et d'en consulter la documentation.
C'est aussi un des endroits où il est possible d'installer des packages avec RStudio.
L'onglet *Help* permet à l'utilisateur de rechercher et de consulter de la documentation sur de nombreux sujets, notamment sur les différentes fonctions en R ainsi que sur les packages.
L'onglet *Viewer*, quant à lui, permet de visualiser du contenu web local.

Enfin, l'utilisateur peut modifier les dimensions par défaut de chacun des quatre volets principaux.
En cliquant sur la séparation entre les sections, il est possible d'ajuster la répartition horizontale de l'espace.
De plus, chaque côté dispose d'une autre séparation permettant d'ajuster l'espace vertical.
Qui plus est, la barre de titre de chaque volet comporte des icônes pour réduire un composant, maximiser un volet verticalement ou modifier la taille de l'espace de travail.

## Conclusion

Le langage de programmation R est un outil très utile pour toutes sortes de tâches, notamment liées aux statistiques et à la visualisation graphique.
Sa maîtrise est requise pour accéder à plusieurs emplois, tant dans le monde académique que dans les secteurs public et privé.
Bien que le langage de programmation R ne doive pas obligatoirement être utilisé avec RStudio, nous pensons que, pour la plupart des utilisateurs, leur utilisation conjointe est bénéfique.
RStudio permet également d'utiliser différents langages de balisage compatibles avec R, facilitant ainsi l'utilisation de plusieurs outils complémentaires.
L'apprentissage du langage de programmation R apparaît comme une valeur sûre.
Sa longévité dans plusieurs domaines ainsi que la forte croissance de sa base d'utilisateurs laissent présager que connaître au moins les bases de R constitue un énorme avantage.
Pour ceux qui sont particulièrement intéressés par le langage de programmation R et qui souhaitent s'impliquer dans sa communauté, il existe plusieurs conférences internationales et nationales sur R -- notamment RConference et useR! -- ainsi qu'un journal académique, *The R Journal*.
On retrouve également différentes communautés, telles que R-Ladies, qui mettent de l'avant la diversité des genres dans la communauté du langage de programmation R.
Le langage de programmation R est plus qu'un simple outil statistique, il est au centre d'une grande communauté de personnes qui ont à cœur des principes liés à l'inclusion et à l'avancement humain.
